class Solution {
public:

  int  bs(vector<int>& nums, int target,int l,int r){
      int res=-1;
      while(l<=r){

            int mid= l + (r-l)/2;
            if(nums[mid]==target){
                return mid;
            }
            
            else if(nums[mid]<target)
                {l=mid+1;}
            else
                 r=mid-1;

        }
        return res;
  }
    int search(vector<int>& arr, int target) {
        
        
        
        int N=arr.size();
        int start=0;
        int end=arr.size()-1;
        int res=-1;
        int temp=-1;
        while(start<=end){
           int mid= start + (end-start)/2;

           cout<<mid<<" "; 
           int prev=(mid+N-1)%N;
           int next=(mid+1)%N;

            if(arr[mid]<=arr[next] && arr[mid]<=arr[prev])
             {
                 temp=mid;
                 break;
             }
           else if(arr[mid]>=arr[end])
             {   
                 start=mid+1;
             }
             
           else 
             {  
                 end=mid-1;
             }     
        }
       // cout<<temp<<"temp "<<temp ;

       //the we got the pivot elemnt index stored in temp 
       //run Binary search on 2 sub array from 0 to temp-1 & temp to N-1
       //if it exist in arr1 it will return if not then return -1
       int x= bs(arr,target,0,temp-1);
       int y= bs(arr,target,temp,N-1);

       if(x!=-1)
          return x;
          
      if(y!=-1)
        return y;

       

        
        // if  both x=-1 & y=-1
        return -1;

    }
};
